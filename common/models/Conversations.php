<?php

namespace common\models;

use backend\components\Helper;
use Yii;
use yii\web\UploadedFile;

/**
 * This is the model class for table "conversations".
 *
 * @property int $id
 * @property int $user_id
 * @property int $manager_id
 * @property int $status
 * @property string $notes
 * @property string $attachment
 * @property string $date
 */
class Conversations extends \yii\db\ActiveRecord
{
    const STATUS_ALL_DELETED = 0;
    const STATUS_ALL_SHOW = 1;
    const STATUS_DELETED_USER = 2;
    const STATUS_DELETED_MANAGER = 3;


    /**
     * @var UploadedFile
     */
    public $attachment_f;

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'conversations';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['attachment_f'], 'file', 'skipOnEmpty' => true],
            [['user_id', 'manager_id',
                'status',
            ], 'integer'],
            [['date'], 'safe'],
            [['notes','user_id'], 'required'],
            [['notes', 'attachment'], 'string'],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'user_id' => 'User ID',
            'manager_id' => 'Manager ID',
            'notes' => 'Notes',
            'attachment' => 'Attachment',
            'date' => 'Date',
            'attachment_f' => 'Attachment',
        ];
    }

    public function beforeSave($insert)
    {
        if(empty($this->manager_id)){
            $this->manager_id = Yii::$app->user->getId();
        }
        $this->date = Helper::GetDateFoSql($this->date);
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function updateAttach()
    {
        if (!empty($this->attachment_f)) {
            $name = substr(md5(microtime(true)), 0, 5) . '_' . date('d-m-Y') . '.' . $this->attachment_f->extension;
            $this->attachment_f->saveAs('attachments/' . $name);
            return $name;
        } else {
            return false;
        }
    }

    public static function GetReceivedConversations()
    {
        return (new \yii\db\Query())
            ->select(
                [
                    'c.*',
                    'u.avatar',
                    'u.first_name',
                    'u.last_name',
                ])
            ->from(self::tableName() . ' as c')
            ->leftJoin(\backend\models\User::tableName() . ' u', 'u.id = c.user_id')
            ->where(['c.manager_id' => Yii::$app->user->getId()])
            ->andFilterWhere(['or',
                ['=', 'c.status', self::STATUS_ALL_SHOW],
                ['=', 'c.status', self::STATUS_DELETED_USER]])
            ->all();
    }

    public static function GetProvidedConversations()
    {
        return (new \yii\db\Query())
            ->select(
                [
                    'c.*',
                    'u.avatar',
                    'u.first_name',
                    'u.last_name',
                ])
            ->from(self::tableName() . ' as c')
            ->leftJoin(\backend\models\User::tableName() . ' u', 'u.id = c.manager_id')
            ->where(['c.user_id' => Yii::$app->user->getId()])
            ->andFilterWhere(['or',
                ['=', 'c.status', self::STATUS_ALL_SHOW],
                ['=', 'c.status', self::STATUS_DELETED_MANAGER]])
            ->all();
    }
}
